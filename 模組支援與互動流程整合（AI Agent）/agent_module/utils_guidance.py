# agent_module/utils_guidance.py

from typing import List, Dict
import re

# ✅ 分類規則（新增氣氛/距離/景觀 + 多句式對應）
RULES = [
    # --- 飲食偏好 ---
    ("飲食偏好", ['不吃辣', '怕辣', '我不吃辣'], '已排除辣味選項，推薦清爽、湯品等溫和口味'),
    ("飲食偏好", ['不吃牛', '我不吃牛'], '已排除牛肉餐點，可推薦雞肉、海鮮或蔬食'),
    ("飲食偏好", ['不吃海鮮', '海鮮過敏'], '已排除海鮮餐廳，推薦其他類型'),
    ("飲食偏好", ['吃素', '素食', '我吃素'], '已識別為素食需求，可推薦素食或蔬食友善餐廳'),

    # --- 用餐場合 ---
    ("用餐場合", ['朋友聚餐', '同學聚餐', '聚會'], '適合朋友聚會，可推薦平價熱鬧或多人套餐餐廳'),
    ("用餐場合", ['家庭聚餐', '家人吃飯', '家族聚餐', '爸媽'], '適合家庭用餐，建議選擇環境安靜、多樣菜色的餐廳'),
    ("用餐場合", ['約會'], '氣氛佳的推薦適合約會，可考慮咖啡廳或裝潢溫馨的餐廳'),
    ("用餐場合", ['商務', '請客', '正式'], '推薦穩重氣氛與高評價的餐廳，適合正式或商務用途'),
    ("用餐場合", ['慶生', '生日', '慶祝'], '推薦氣氛佳、有蛋糕或包廂的餐廳，適合慶祝場合'),
    ("用餐場合", ['小孩', '小朋友', '帶孩子', '兒童'], '適合親子用餐，建議考慮有兒童餐或寬敞空間的店家'),
    ("用餐場合", ['長輩', '父母', '家人一起吃'], '建議選擇環境安靜、餐點清淡的家庭友善餐廳'),

    # --- 預算 ---
    ("預算", [
        '不貴', '便宜', '平價', '價格實惠',
        '太貴', '不想太貴', '不要太貴', '不會太貴',
        '不想吃太貴', '不想花太多', '價格太高', '價格高'
    ], '偏好不貴的餐廳，可以優先查看平價高評價選項'),

    # --- 時段 ---
    ("時段", ['宵夜', '深夜'], '推薦宵夜時段營業中的輕食、炸物或拉麵等店家'),
    ("時段", ['早午餐'], '可推薦氣氛佳、評價高的早午餐店'),
    ("時段", ['早餐'], '推薦營業中的中西式早餐選項'),

    # --- 料理類型 ---
    ("料理類型", ['甜點'], '推薦甜點評價高的餐廳或咖啡廳'),
    ("料理類型", ['拉麵', '日式'], '可推薦高分日式餐廳與拉麵名店'),
    ("料理類型", ['韓式'], '推薦高人氣韓式料理'),
    ("料理類型", ['中式'], '中式餐廳選擇豐富，推薦合菜或便當型店家'),
    ("料理類型", ['義式', '義大利麵'], '可推薦義式料理與義大利麵專門店'),
    ("料理類型", ['美式', '漢堡'], '推薦高評價美式漢堡或炸物餐廳'),

    # --- 飲食狀態 ---
    ("飲食狀態", ['吃不多', '吃少一點', '簡單吃', '輕食'], '推薦輕食類型如三明治、沙拉或早午餐'),
    ("飲食狀態", ['趕時間', '快速吃', '時間不多'], '推薦供餐快速或外帶方便的選項'),
    ("飲食狀態", ['天氣冷', '想吃熱的', '暖胃'], '推薦湯品、火鍋或熱炒等溫暖料理'),
    ("飲食狀態", ['想吃辣', '重口味', '辣的料理', '麻辣', '辣鍋'], '適合重口味愛好者，推薦麻辣火鍋、川菜或韓式辣炒等餐廳'),
    ("飲食狀態", ['清淡', '不想太油', '吃清爽的'], '推薦清爽或湯品類型，適合口味較淡的需求'),

    # --- 情境偏好 ---
    ("情境偏好", ['氣氛', '氛圍', '環境', '舒適'], '適合注重氣氛的場合，可推薦裝潢溫馨或音樂舒適的餐廳'),
    ("情境偏好", ['近一點', '距離近', '不要太遠', '就近'], '可優先推薦距離近或交通方便的店家'),
    ("情境偏好", ['景觀', '風景', '窗邊', '景色'], '推薦可觀景或氣氛佳的窗邊座位餐廳'),
]

# ✅ 簡單關鍵詞比對
def match_any(keywords: List[str], text: str) -> bool:
    return any(k in text for k in keywords)

# ✅ 主分析函式：支援多句結構與合併結果
def analyze_input_guidance(user_input: str) -> Dict:
    text = user_input.strip().lower()
    summary = []
    seen = set()

    # ✅ 多句切分
    segments = re.split(r'[、，。,\n]|也|而且|\s+and\s+|\s+but\s+', text)

    for seg in segments:
        seg = seg.strip()
        for category, keywords, message in RULES:
            if match_any(keywords, seg):
                if message not in seen:
                    summary.append({"type": category, "message": message})
                    seen.add(message)

    # ✅ 排除類型觸發
    if match_any(['不想吃', '不吃', '不要'], text) and match_any(
        ['甜點', '拉麵', '日式', '韓式', '中式', '義式', '義大利麵', '美式', '漢堡', '燒烤', '火鍋'], text):
        msg = "已排除特定料理類型，可推薦其他選項"
        if msg not in seen:
            summary.append({"type": "排除語句", "message": msg})
            seen.add(msg)

    # ✅ fallback
    if not summary:
        summary.append({"type": "其他", "message": "您可以輸入想吃的類型、場合、預算等資訊，我們會給您更好的建議！"})

    # ✅ 結構化輸出
    guidance_combined = "；".join(item["message"] for item in summary)
    levels = list({item["type"] for item in summary})

    return {
        "summary": summary,
        "guidance": guidance_combined,
        "level": levels
    }
